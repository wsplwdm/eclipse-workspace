package przycisk_plik.controller;
import lab1.*;
import lab1.Integer;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.File;
import java.io.FileReader;
import java.util.List;

import javafx.fxml.FXML;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.text.*;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;


public class StackPaneController {
	@FXML
	private LineChart lineChart;
	

	List<String> lstFile;
	@FXML
	private Button button;
	private Button button2;
	public Label stats;
	public Label stats1;
	
	
	public StackPaneController() {
		
	}
	
	
	@FXML
	public void onActonButton() {
		String max,min,mean,var,sum,std;
		
		String[] typy = {"Value","Value","Value"};
    	boolean header = true;
        try {
			DataFrame plik = new DataFrame("C:\\Users\\darkb\\Documents\\data.csv",typy,header);
		
		    
		    ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
		    PrintStream ps1 = new PrintStream(baos1);
		    PrintStream old1 = System.out;
		    System.setOut(ps1);
		    plik.max().print();
	        System.out.flush();
		    System.setOut(old1);
		    max = baos1.toString();
		   
		    ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
		    PrintStream ps2 = new PrintStream(baos2);
		    PrintStream old2 = System.out;
		    System.setOut(ps2);
	        plik.min().print();
	        System.out.flush();
		    System.setOut(old2);
		    min = baos2.toString();
		    
		    ByteArrayOutputStream baos3 = new ByteArrayOutputStream();
		    PrintStream ps3 = new PrintStream(baos3);
		    PrintStream old3 = System.out;
		    System.setOut(ps3);
	        plik.mean().print();
	        System.out.flush();
		    System.setOut(old3);
		    mean = baos3.toString();
		    
		    ByteArrayOutputStream baos4 = new ByteArrayOutputStream();
		    PrintStream ps4 = new PrintStream(baos4);
		    PrintStream old4 = System.out;
		    System.setOut(ps4);
	        plik.var().print();
	        System.out.flush();
		    System.setOut(old4);
		    var = baos4.toString();
		    
		    ByteArrayOutputStream baos5 = new ByteArrayOutputStream();
		    PrintStream ps5 = new PrintStream(baos5);
		    PrintStream old5 = System.out;
		    System.setOut(ps5);
	        plik.sum().print();
	        System.out.flush();
		    System.setOut(old5);
		    sum = baos5.toString();
		    
		    ByteArrayOutputStream baos6 = new ByteArrayOutputStream();
		    PrintStream ps6 = new PrintStream(baos6);
		    PrintStream old6 = System.out;
		    System.setOut(ps6);
	        plik.std().print();
	        System.out.flush();
		    System.setOut(old6);
		    std = baos6.toString();
	       
	        stats.setText("data frame stats:\n \n"+"max:  "+max+"\n"+"min:  "+min+"\n"+"mean: "+mean+"\n"+"var:  "+var+"\n"+"sum:  "+sum+"\n"+"std:  "+std+"\n");
	        
	        
	        lineChart.getData().clear();
	        LineChart.Series<?,?> series = new XYChart.Series();
	        Value[] xl = new Value[plik.size()];
	        Value[] yl = new Value[plik.size()];
	        for(int i =0;i<plik.size();i++) {
	      
	        	xl[i]=(plik.df.get(0).list.get(i));
	        		        	
	        }
	        for(int i =0;i<plik.size();i++) {
			      
	        	yl[i]=(plik.df.get(1).list.get(i));
	        		        	
	        }
	        for(int i=0;i<xl.length;i++) {
	        series.getData().add(new XYChart.Data(xl[i].GetValue(), yl[i].GetValue()));
	      
	        }
	        lineChart.getData().addAll(series);
	       
	       
		} catch (Exception e) {
			
			stats1.setText(e.toString());
		}
		
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void onActonButton2() {
		String max = " ",min= " ",mean= " ",var= " ",sum= " ",std =" ";
		FileChooser fc = new FileChooser();
		fc.getExtensionFilters().add(new ExtensionFilter("csv Files", "*.csv"));
		List<File> f = fc.showOpenMultipleDialog(null);
		for(File file: f) {
    	boolean header = true;
        try {
        	BufferedReader br = new BufferedReader(new FileReader(file.getAbsolutePath())); 
        	
        	String firstLine = br.readLine();
        	String[] nazwy = firstLine.split(",");
        	
        	int colnumber = nazwy.length;
        	String secondLine = br.readLine();
        	String[] typ = secondLine.split(",");
        	Value[] types = new Value[colnumber];
        	
        	for(int i =0;i<colnumber;i++) {
        		try {
        			int result = java.lang.Integer.parseInt(typ[i]);
        			Integer resulttype = new lab1.Integer(result);	
        			types[i]=resulttype;
        			}
        		catch(NumberFormatException ei){
        			try {
        				double result = java.lang.Double.parseDouble(typ[i]);
        				lab1.Double resulttype = new lab1.Double(result);
        				types[i]=resulttype;
        				}
        			catch(NumberFormatException ed) {
        				try {
            				float result = java.lang.Float.parseFloat(typ[i]);
            				lab1.Float resulttype = new lab1.Float(result);
            				types[i]=resulttype;            				}
            			catch(NumberFormatException ef) {
            				String result = typ[i];
            				lab1.SValue resulttype = new lab1.SValue(result);
            				types[i]=resulttype;
            				}
        			}
        		}
        		
        	}
        	
        	
			DataFrame plik = new DataFrame(file.getAbsolutePath(),types,header);
			
			 
			    
			    for(int i =0; i<colnumber;i++) {
			    	max += plik.max().df.get(i).list.get(0).toString() +"		";
			    	min += plik.min().df.get(i).list.get(0).toString() +"		";
			    	mean += plik.mean().df.get(i).list.get(0).toString() +" 	 ";
			    	var += plik.var().df.get(i).list.get(0).toString() +"		";
			    	sum += plik.sum().df.get(i).list.get(0).toString() +"		";
			    	std += plik.std().df.get(i).list.get(0).toString() +"		";
			    }
			    	
			 
		        stats.setText("data frame stats:\n \n"+"max:  "+max+"\n"+"min:  "+min+"\n"+"mean: "+mean+"\n"+"var:  "+var+"\n"+"sum:  "+sum+"\n"+"std:  "+std+"\n");
		        
		     
		        
		        
		        
		     
		        lineChart.getData().clear();
		        LineChart.Series<?,?> series = new XYChart.Series();
		        Value[] xl = new Value[plik.size()];
		        Value[] yl = new Value[plik.size()];
		        for(int i =0;i<plik.size();i++) {
		      
		        	xl[i]=(plik.df.get(0).list.get(i));
		        		        	
		        }
		        for(int i =0;i<plik.size();i++) {
				      
		        	yl[i]=(plik.df.get(1).list.get(i));
		        		        	
		        }
		        for(int i=0;i<xl.length;i++) {
		        series.getData().add(new XYChart.Data(xl[i].GetValue(), yl[i].GetValue()));
		        
		        }
		        lineChart.getData().addAll(series);
		} catch (Exception e) {
			stats1.setText(e.toString());
			e.printStackTrace();
		}
        
		}
		
	}
	
	
	
}
